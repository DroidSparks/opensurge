// ----------------------------------------
// Open Surge Engine
// http://opensnc.sourceforge.net
//
// Changelog:
// 2012-12-24 - first version by Alexandre
// 2012-12-25 - more stuff
// 2013-02-09 - made the boss easier
// ----------------------------------------

object "Big Wolf"
{
    requires 0.2.0
    always_active
    category "boss" "level 1"
    annotation "Boss: Sunshine Paradise"
    //hide_unless_in_editor_mode

    state "main"
    {
        // hp, health points
        let "$hp = 100"

        // each hit discards this amount from the hp
        let "$hit_loss = 30"

        // anger threshold (if hp is this or less, the boss gets angry)
        let "$anger_threshold = 25"

        // other stuff
        set_animation "SD_BIGWOLF" 0
        set_zindex 0.3

        // done
        create_child .bigwolf_playerintheair 0 0 playerintheair
        change_state wait_for_opponent
    }

    state wait_for_opponent
    {
        on_player_rect_collision -320 -240 320 240 appear_in_playfield
    }




    // ======= appearing animation =========

    state appear_in_playfield
    {
        let "$locker_x = xpos()"
        let "$locker_y = ypos()"

        set_animation "SD_BIGWOLF" 1
        set_absolute_position spawnpoint_x() spawnpoint_y()+screen_height()
        play_sample samples/bosshit.wav

        create_child .bigwolf_apexpfx -96 -96
        create_child .bigwolf_apexpfx -64 -96
        create_child .bigwolf_apexpfx -32 -96
        create_child .bigwolf_apexpfx 0 -96
        create_child .bigwolf_apexpfx 32 -96
        create_child .bigwolf_apexpfx 64 -96

        create_child .bigwolf_introcutscene -23 -50 introcutscene
        change_state appearing_in_playfield
    }

    state appearing_in_playfield
    {
        set_absolute_position xpos() "max(spawnpoint_y(), ypos() - 1.0*screen_height()*dt())"
        if ypos()<=spawnpoint_y() appeared_in_playfield
    }

    state appeared_in_playfield
    {
        set_absolute_position xpos() spawnpoint_y()
    }

    state roaring
    {
        set_animation "SD_BIGWOLF" 2
        create_child .bigwolf_roar
        change_state roared
    }

    state roared
    {
    }

    // callbacks (called by .bigwolf_introcutscene)
    state @intro_roar
    {
        change_state roaring
    }

    state @intro_end
    {
        set_animation "SD_BIGWOLF" 0
        set_alpha 0.4
        hide

        change_state init_fight
    }

    // =============== big wolf programming ===============

    state !reset_globals
    {

        let $_bigwolf_moviefx_active=0
        let $_bigwolf_justgothit=0
        let $_bigwolf_is_dead=0
        let $_bigwolf_is_angry=0
        let $_bigwolf_is_punching=0
        let $_bigwolf_head_got_hit=0
        let $_bigwolf_handlock=0
        let $_bigwolf_playerintheair=0
    }

    state init_fight
    {
        // lock the player
        let "$mx = xpos()"
        let "$my = ypos()"
        set_absolute_position $locker_x $locker_y
        create_child .bigwolf_arenalocker 0 0 arenalocker
        set_absolute_position $mx $my

        // create body parts
        create_child .bigwolf_head -23 -70 head
        create_child .bigwolf_body 10 64 body
        create_child .bigwolf_hand -90+4 20 righthand
        create_child .bigwolf_hand 45-4 20 lefthand

        // go!!
        execute !reset_globals
        change_state stopped
    }

    state stopped
    {
        execute !update_hp
        execute !check_if_angry

        let "$margin = cond(not($angry), 50, 50)"
        if "xpos()-25 >= player_xpos() + $margin" walk_left
        if "xpos()-25 < player_xpos() - $margin" walk_right

        //let "$rnd = (-0.5 + random(2)) * 2"
        let "$rnd = sign( (xpos() - 25) - player_xpos() )"
        if "player_xpos() >= xpos()-25-$margin/1.3 and player_xpos() <= xpos()-25+$margin/1.3" walk_rnd
    }

    state walk_left
    {
        execute !update_hp
        execute !check_if_angry
        execute !stop_if_punching
        if "$am_i_punching and not($angry)" stopped
        if "$_bigwolf_moviefx_active" stopped
        if "$_bigwolf_justgothit" stopped

        let "$multiplier = cond($angry, 3, 1)"
        set_absolute_position xpos() spawnpoint_y()+5*cos($multiplier*3*pi()*($t+=dt()))
        move "-50 * $multiplier" 0

        unless "xpos()-25 >= player_xpos() + $margin" stopped
    }

    state walk_right
    {
        execute !update_hp
        execute !check_if_angry
        execute !stop_if_punching
        if "$am_i_punching and not($angry)" stopped
        if "$_bigwolf_moviefx_active" stopped
        if "$_bigwolf_justgothit" stopped

        let "$multiplier = cond($angry, 3, 1)"
        set_absolute_position xpos() spawnpoint_y()+5*cos($multiplier*3*pi()*($t+=dt()))
        move "50 * $multiplier" 0

        unless "xpos()-25 < player_xpos() - $margin" stopped
    }

    state walk_rnd
    {
        execute !update_hp
        execute !check_if_angry
        execute !stop_if_punching
        if "$am_i_punching and not($angry)" stopped
        if "$_bigwolf_moviefx_active" stopped
        if "$_bigwolf_justgothit" stopped

        let "$multiplier = cond($angry, 3, 1)"
        set_absolute_position xpos() spawnpoint_y()+5*cos($multiplier*3*pi()*($t+=dt()))
        move "($rnd * 50) * $multiplier" 0

        if "(xpos()-25 > player_xpos() + $margin) or (xpos()-25 < player_xpos() - $margin)" stopped
    }

    state dead
    {
        play_sample samples/growlmod.wav
        change_state dying
    }

    state dying
    {
        move 0 50 // falling down...
        if "ypos() >= spawnpoint_y() + screen_height() * 1.5" destroy
    }

    state destroy
    {
        change_child_state body @destroy
        change_child_state head @destroy
        change_child_state lefthand @destroy
        change_child_state righthand @destroy
        change_child_state arenalocker @destroy
        change_child_state playerintheair @destroy
        change_state destroy_wait
    }

    state destroy_wait
    {
        set_absolute_position player_xpos() player_ypos()
        on_timeout 0.5 destroy_really
    }

    state destroy_really
    {
        clear_level
        //change_state destroy_dammit
    }

    state destroy_dammit
    {
        destroy
    }



    // ======= callbacks =======
    state @get_position
    {
        let "$_bigwolf_xpos = xpos()"
        let "$_bigwolf_ypos = ypos()"
        return_to_previous_state
    }

    state @is_dead?
    {
        let "$_bigwolf_is_dead = ($hp <= 0)"
        return_to_previous_state
    }

    state @is_angry?
    {
        let "$_bigwolf_is_angry = $angry"
        return_to_previous_state
    }


    // ======= misc =======
    state !stop_if_punching
    {
        let "$am_i_punching = 0"
        change_child_state lefthand @is_punching?
        let "$am_i_punching = $am_i_punching or $_bigwolf_is_punching"
        change_child_state righthand @is_punching?
        let "$am_i_punching = $am_i_punching or $_bigwolf_is_punching"
        if $am_i_punching stopped
    }

    state !update_hp
    {
        change_child_state head @got_hit?
        let "$hp = cond($_bigwolf_head_got_hit, $hp - $hit_loss, $hp)"
        if "$hp <= 0" dead
    }

    state !check_if_angry
    {
        let "$angry = ($hp <= $anger_threshold)"
    }
}

object .bigwolf_head
{
    requires 0.2.0
    always_active

    state main
    {
        set_animation SD_BIGWOLF_HEAD 0
        set_zindex 0.45
        change_state init_fight
    }

    state init_fight
    {
        // grab offset
        change_parent_state @get_position
        let "$offset_x = xpos() - $_bigwolf_xpos"
        let "$offset_y = ypos() - $_bigwolf_ypos"

        // start
        change_state vulnerable
    }

    state vulnerable
    {
        execute !update_position
        execute !check_if_dead
        execute !check_if_angry

        execute !play_angry_movie if "($angry and not($angry_movie_played))"
        if $_bigwolf_moviefx_active vulnerable

        set_animation SD_BIGWOLF_HEAD "cond(not($angry), 0, 3)"
        on_player_rect_collision -5 -85 5 -65 very_vulnerable
    }

    state very_vulnerable
    {
        execute !update_position
        execute !check_if_dead
        on_player_attack get_hit
        change_state vulnerable
    }

    state get_hit
    {
        bounce_player
        create_child .bigwolf_hitfx 0 0
        play_sample samples/destroypop.wav
        set_animation SD_BIGWOLF_HEAD 2
        let "$t2 = 2"
        let "$got_hit = 1"
        change_state cooldown
    }

    state cooldown
    {
        execute !update_position
        execute !check_if_dead
        execute !check_if_angry

        let "$_bigwolf_justgothit = 1"
        set_absolute_position xpos() "ypos() + ($t2-=dt())*cos(4*pi()*($t+=dt()))"
        if "$t2 <= 0" restore
    }

    state restore
    {
        execute !update_position
        execute !check_if_dead

        let "$_bigwolf_justgothit = 0"
        set_animation SD_BIGWOLF_HEAD 0
        change_state vulnerable
    }

    state dead
    {
        execute !update_position
        set_animation SD_BIGWOLF_HEAD 1
    }



    // ======= callbacks =======
    state @destroy
    {
        destroy
    }

    state @got_hit?
    {
        let "$_bigwolf_head_got_hit = $got_hit"
        let "$got_hit = 0"
        return_to_previous_state
    }



    // ======= misc =======
    state !update_position
    {
        change_parent_state @get_position
        let "$xpos = $offset_x + $_bigwolf_xpos"
        let "$ypos = $offset_y + $_bigwolf_ypos"
        let "$ypos += cond($angry, abs(3*cos(5*2*pi()*($tt+=dt()))), 0)"
        set_absolute_position $xpos $ypos
    }

    state !check_if_dead
    {
        change_parent_state @is_dead?
        if $_bigwolf_is_dead dead
    }

    state !check_if_angry
    {
        change_parent_state @is_angry?
        let "$angry = $_bigwolf_is_angry"
    }

    state !play_angry_movie
    {
        let "$angry_movie_played = 1"
        let "$_bigwolf_moviefx_timeout = 2.5"
        set_animation SD_BIGWOLF_HEAD 3
        create_child .bigwolf_roar
        create_child .bigwolf_moviefx 0 0
    }
}

object .bigwolf_body
{
    requires 0.2.0
    always_active

    state main
    {
        set_animation SD_BIGWOLF_BODY 0
        set_zindex 0.4
        change_state init_fight
    }

    state init_fight
    {
        // grab offset
        change_parent_state @get_position
        let "$offset_x = xpos() - $_bigwolf_xpos"
        let "$offset_y = ypos() - $_bigwolf_ypos"

        // start
        change_state loop
    }

    state loop
    {
        execute !update_position
        execute !check_if_dead
    }

    state dead
    {
        execute !update_position
    }



    // ======= callbacks =======
    state @destroy
    {
        destroy
    }



    // ======= misc =======
    state !update_position
    {
        change_parent_state @get_position
        let "$xpos = $offset_x + $_bigwolf_xpos"
        let "$ypos = $offset_y + $_bigwolf_ypos"
        set_absolute_position $xpos $ypos
    }

    state !check_if_dead
    {
        change_parent_state @is_dead?
        if $_bigwolf_is_dead dead
    }
}

object .bigwolf_hand
{
    requires 0.2.0
    always_active
    hide_unless_in_editor_mode

    state main
    {
        set_animation SD_BIGWOLF_HANDCOLLIDER 0
        set_zindex 0.444
        let "$id = ($_bigwolf_hand_id += 1) mod 2"
        change_state init_fight
    }

    state init_fight
    {
        // grab offset
        change_parent_state @get_position
        let "$offset_x = xpos() - $_bigwolf_xpos"
        let "$offset_y = ypos() - $_bigwolf_ypos"

        // my children
        create_child .bigwolf_hand_skin 0 15 skin
        create_child .bigwolf_hand_damager 0 15+39 damager

        // am i the left or the right hand?
        let "$left_hand = ($offset_x+25 > 0)"

        // im not punching
        let "$punching = 0"

        // done
        change_state watching
    }

    state watching
    {
        execute !update_position
        execute !check_if_dead
        execute !check_if_angry

        if $_bigwolf_justgothit watching // cooling down; the head is shaking
        on_player_rect_collision -2 0 2 200 punch

        if $dead dead
        unless $angry watching
        execute angry_punch unless $_bigwolf_handlock
    }

    state watching_nopunch
    {
        execute !update_position
        execute !check_if_dead
        execute !check_if_angry

        if $angry watching
        on_timeout 1.0 watching
    }

    state angry_punch
    {
        let "$_bigwolf_handlock = 1"
        change_state punch
    }

    state punch
    {
        execute !check_if_dead
        execute !check_if_angry
        if $_bigwolf_justgothit watching
        if $_bigwolf_moviefx_active watching

        let "$punching = 1"
        let "$yspeed = cond($angry, 500, 300)"

        change_parent_state @get_position
        let "$xpos = $offset_x + $_bigwolf_xpos"
        let "$ypos = ypos() + $yspeed*dt()"
        set_absolute_position $xpos $ypos

        if "brick_exists(cond($left_hand, -34, 34), 35)" punched
        if "ypos() > spawnpoint_y()+150" cooldown_pre
    }

    state punched
    {
        create_child .bigwolf_punchfx 0 35
        play_sample samples/floorhit.wav
        change_state cooldown_pre
    }

    state cooldown
    {
        execute !check_if_dead
        execute !check_if_angry
        change_parent_state @get_position
        let "$xpos = $offset_x + $_bigwolf_xpos"
        let "$ypos = ypos()"
        set_absolute_position $xpos $ypos

        on_player_gethit got_him
        set_obstacle TRUE
        on_timeout "cond(not($angry), 3.0, 0.5)" go_up
    }

    state got_him
    {
        execute !check_if_dead
        set_obstacle FALSE
        on_timeout "cond(not($angry), 1.0, 0.0)" cooldown
    }

    state cooldown_pre
    {
        let "$_bigwolf_handlock = 0"
        change_state cooldown
    }

    state go_up
    {
        execute !check_if_dead
        execute !check_if_angry
        let "$goingup = 1"
        let "$yspeed = cond($angry, 350, 250)"

        change_parent_state @get_position
        let "$still_moving = (ypos() > $_bigwolf_ypos + $offset_y)"
        let "$xpos = $offset_x + $_bigwolf_xpos"
        let "$ypos = cond($still_moving, ypos() - $yspeed*dt(), $offset_y + $_bigwolf_ypos)"
        set_absolute_position $xpos $ypos

        if $still_moving go_up
        let "$goingup = 0"
        if $angry go_up_done
        change_state go_up_rest
    }

    state go_up_rest
    {
        on_timeout 1.0 go_up_done
    }

    state go_up_done
    {
        set_obstacle FALSE
        let "$punching = 0"
        change_state watching_nopunch
    }

    state dead
    {
        set_obstacle FALSE
        change_child_state damager @destroy
        change_state dead2
    }

    state dead2
    {
        execute !update_position
    }




    // ======= callbacks =======
    state @destroy
    {
        change_child_state skin @destroy
        destroy
    }

    state @is_punching?
    {
        let "$_bigwolf_is_punching = $punching"
        return_to_previous_state
    }

    state @is_goingup?
    {
        let "$_bigwolf_is_goingup = $goingup"
        return_to_previous_state
    }

    state @is_lefthand?
    {
        let "$_bigwolf_hand_is_left = $left_hand"
        return_to_previous_state
    }

    state @get_position
    {
        let "$_bigwolf_hand_xpos = xpos()"
        let "$_bigwolf_hand_ypos = ypos()"
        return_to_previous_state
    }

    state @is_dead?
    {
        change_parent_state @is_dead?
        let "$_bigwolf_hand_is_dead = $_bigwolf_is_dead"
        return_to_previous_state
    }

    state @is_angry?
    {
        change_parent_state @is_angry?
        let "$_bigwolf_hand_is_angry = $_bigwolf_is_angry"
        return_to_previous_state
    }



    // ======= misc =======
    state !update_position
    {
        change_parent_state @get_position
        let "$xpos = $offset_x + $_bigwolf_xpos"
        let "$ypos = $offset_y + $_bigwolf_ypos"
        set_absolute_position $xpos $ypos
    }

    state !check_if_dead
    {
        change_parent_state @is_dead?
        if $_bigwolf_is_dead dead
    }

    state !check_if_angry
    {
        change_parent_state @is_angry?
        let "$angry = $_bigwolf_is_angry"
    }
}



object .bigwolf_hand_skin
{
    requires 0.2.0
    always_active

    state main
    {
        set_animation SD_BIGWOLF_HAND 0
        set_zindex 0.44
        change_state init_fight
    }

    state init_fight
    {
        // grab offset
        change_parent_state @get_position
        let "$offset_x = xpos() - $_bigwolf_hand_xpos"
        let "$offset_y = ypos() - $_bigwolf_hand_ypos"

        // left or right hand?
        change_parent_state @is_lefthand?
        look_right
        if $_bigwolf_hand_is_left loop
        look_left

        // done
        change_state loop
    }

    state loop
    {
        execute !update_position
        execute !check_if_angry

        change_parent_state @is_punching?
        let "$punching = $_bigwolf_is_punching"

        change_parent_state @is_dead?
        set_animation SD_BIGWOLF_HAND "cond($punching or $angry or $_bigwolf_hand_is_dead or $_bigwolf_moviefx_active, 1, 0)"

        change_parent_state @is_goingup?
        unless $_bigwolf_is_goingup loop
        on_player_rect_collision -5 -32 5 0 moveup
    }

    state moveup
    {
        execute !update_position

        move_player 0 -250
        change_parent_state @is_goingup?
        unless $_bigwolf_is_goingup loop
    }

    state dead
    {
        execute !update_position
    }

    // ======= callbacks =======
    state @destroy
    {
        destroy
    }

    // ======= misc =======
    state !update_position
    {
        change_parent_state @get_position
        let "$xpos = $offset_x + $_bigwolf_hand_xpos"
        let "$ypos = $offset_y + $_bigwolf_hand_ypos"
        set_absolute_position $xpos $ypos
    }

    state !check_if_dead
    {
        change_parent_state @is_dead?
        if $_bigwolf_hand_is_dead dead
    }

    state !check_if_angry
    {
        change_parent_state @is_angry?
        let "$angry = $_bigwolf_hand_is_angry"
    }
}




object .bigwolf_hand_damager
{
    requires 0.2.0
    always_active
    hide_unless_in_editor_mode

    state main
    {
        set_animation SD_BIGWOLF_HANDDAMAGER 0
        set_zindex 0.444
        change_state init_fight
    }

    state init_fight
    {
        // grab offset
        change_parent_state @get_position
        let "$offset_x = xpos() - $_bigwolf_hand_xpos"
        let "$offset_y = ypos() - $_bigwolf_hand_ypos"

        // done
        change_state loop
    }

    state loop
    {
        execute !update_position

        change_parent_state @is_punching?
        let "$punching = $_bigwolf_is_punching"
        change_parent_state @is_goingup?
        let "$goingdown = not($_bigwolf_is_goingup)"

        if "not($punching and $goingdown)" loop
        on_player_collision damage
    }

    state damage
    {
        execute !update_position
        execute !check_if_dead

        if $dead damage
        if "$_bigwolf_justgothit" damage

        on_player_collision damage_gambiarra
        change_state cooldown
    }

    state damage_gambiarra
    {
        hit_player
        change_state cooldown
    }

    state cooldown
    {
        execute !update_position
        on_timeout 2.0 loop
    }

    state dead
    {
        execute !update_position
    }


    // ======= callbacks =======
    state @destroy
    {
        destroy
    }

    // ======= misc =======
    state !update_position
    {
        change_parent_state @get_position
        let "$xpos = $offset_x + $_bigwolf_hand_xpos"
        let "$ypos = $offset_y + $_bigwolf_hand_ypos"
        set_absolute_position $xpos $ypos
    }

    state !check_if_dead
    {
        change_parent_state @is_dead?
        if $_bigwolf_hand_is_dead dead
    }
}

object .bigwolf_arenalocker
{
    requires 0.2.0
    always_active
    hide_unless_in_editor_mode

    state main
    {
        lock_camera -360 -240 360 240
    }

    // ======= callbacks =======
    state @destroy
    {
        destroy
    }
}



object .bigwolf_punchfx
{
    requires 0.2.0
    destroy_if_far_from_play_area

    state main
    {
        set_animation SD_IMPACT 0
        set_scale 1.3 1
        change_state find_position
    }

    state find_position
    {
        execute "!move_up" for "$i=0" "$i<=50 and brick_exists(0,0)" "$i+=1"
        change_state wait
    }

    state wait
    {
        on_animation_finished destroy
    }

    state destroy
    {
        destroy
    }

    state !move_up
    {
        set_absolute_position xpos() -1+ypos()
    }
}



object .bigwolf_hitfx
{
    requires 0.2.0
    destroy_if_far_from_play_area

    state main
    {
        set_animation SD_EXPLOSION 0
        set_zindex 0.6
        set_scale 2 2
        set_absolute_position player_xpos()+0.2*player_xspeed() player_ypos()-10+20
        change_state wait
    }

    state wait
    {
        on_animation_finished destroy
    }

    state destroy
    {
        destroy
    }
}

object .bigwolf_apexpfx
{
    requires 0.2.0
    always_active

    state main
    {
        set_animation SD_EXPLOSION 0
        set_animation_speed_factor 0.5
        set_zindex 0.6
        set_scale 2 2
        change_state wait
    }

    state wait
    {
        on_animation_finished destroy
    }

    state destroy
    {
        destroy
    }
}

object .bigwolf_roar
{
    requires 0.2.0
    always_active

    state main
    {
        hide
        let "$vol = music_volume()"
        set_music_volume 0.5*$vol
        play_sample samples/roar.ogg
        change_state loop
    }

    state loop
    {
        on_timeout 2.5 end
    }

    state end
    {
        set_music_volume $vol
        destroy
    }
}


object .bigwolf_introcutscene
{
    requires 0.2.0
    always_active

    state main
    {
        hide
        disable_player_movement
        set_player_xspeed 0
        set_player_yspeed 0

        // grab offset
        change_parent_state @get_position
        let "$offset_x = xpos() - $_bigwolf_xpos"
        let "$offset_y = ypos() - $_bigwolf_ypos"

        // handle music
        create_child .bigwolf_introcutscene.music 0 0 music

        // ok
        create_child .moviefx 0 0 moviefx
        change_state focus_on_wolf
    }

    state focus_on_wolf
    {
        change_parent_state @get_position
        let $_scm_source_x=player_xpos()
        let $_scm_source_y=player_ypos()
        let $_scm_destiny_x=$offset_x+$_bigwolf_xpos
        let $_scm_destiny_y=$offset_y+$_bigwolf_ypos
        let $_scm_timespan=0.5
        create_child .smooth_camera_movement 0 0 scm

        disable_player_movement
        change_state focus_on_wolf_wait
    }

    state focus_on_wolf_wait
    {
        disable_player_movement
        on_timeout 3 focus_on_surge
    }

    state focus_on_surge
    {
        change_child_state scm @destroy

        change_parent_state @get_position
        let $_scm_source_x=$_scm_destiny_x
        let $_scm_source_y=$_scm_destiny_y
        let $_scm_destiny_x=player_xpos()
        let $_scm_destiny_y=player_ypos()
        let $_scm_timespan=0.5
        create_child .smooth_camera_movement 0 0 scm

        disable_player_movement
        change_state focus_on_surge_wait
    }

    state focus_on_surge_wait
    {
        on_button_pressed fire1 destroy // SKIP CUTSCENE!!!!
        on_button_pressed fire2 destroy // SKIP CUTSCENE!!!!

        disable_player_movement
        set_player_animation SD_SURGE "cond($_bigwolf_playerintheair, 3, 32)"
        on_timeout 1.25 focus_on_surge_wait2
    }

    state focus_on_surge_wait2
    {
        let $_dialogbox_text_id=400
        let $_dialogbox_avatar_id=1
        create_child .dialogbox
        let "$dlg=1"

        disable_player_movement
        set_player_animation SD_SURGE "cond($_bigwolf_playerintheair, 3, 32)"
        change_state focus_on_surge_wait3
    }

    state focus_on_surge_wait3
    {
        disable_player_movement
        set_player_animation SD_SURGE "cond($_bigwolf_playerintheair, 3, 32)"
        // wait for the dialog box...
    }

    state focus_on_wolf2
    {
        disable_player_movement
        set_player_animation SD_SURGE "cond($_bigwolf_playerintheair, 3, 32)"
        change_child_state scm @destroy

        change_parent_state @get_position
        let $_scm_source_x=player_xpos()
        let $_scm_source_y=player_ypos()
        let $_scm_destiny_x=$offset_x+$_bigwolf_xpos
        let $_scm_destiny_y=$offset_y+$_bigwolf_ypos
        let $_scm_timespan=0.5
        create_child .smooth_camera_movement 0 0 scm

        change_parent_state @intro_roar
        change_state focus_on_wolf2_wait
    }

    state focus_on_wolf2_wait
    {
        disable_player_movement
        set_player_animation SD_SURGE "cond($_bigwolf_playerintheair, 3, 32)"
        on_timeout 3.0 focus_on_surge2
    }

    state focus_on_surge2
    {
        disable_player_movement
        set_player_animation SD_SURGE "cond($_bigwolf_playerintheair, 3, 33)"
        change_child_state scm @destroy

        change_parent_state @get_position
        let $_scm_source_x=$_scm_destiny_x
        let $_scm_source_y=$_scm_destiny_y
        let $_scm_destiny_x=player_xpos()
        let $_scm_destiny_y=player_ypos()
        let $_scm_timespan=0.5
        create_child .smooth_camera_movement 0 0 scm

        change_state focus_on_surge2_wait
    }

    state focus_on_surge2_wait
    {
        disable_player_movement
        set_player_animation SD_SURGE "cond($_bigwolf_playerintheair, 3, 33)"
        on_timeout 2.0 focus_on_surge2_wait2
    }

    state focus_on_surge2_wait2
    {
        let $_dialogbox_text_id=401
        let $_dialogbox_avatar_id=1
        create_child .dialogbox
        let "$dlg=2"

        disable_player_movement
        set_player_animation SD_SURGE "cond($_bigwolf_playerintheair, 3, 33)"
        change_state focus_on_surge2_wait3
    }

    state focus_on_surge2_wait3
    {
        disable_player_movement
        set_player_animation SD_SURGE "cond($_bigwolf_playerintheair, 3, 33)"
        // wait for the dialog box...
    }

    // ------------------------

    state .dialogbox:on_destroy
    {
        disable_player_movement
        set_player_animation SD_SURGE "cond($_bigwolf_playerintheair, 3, cond($dlg==1,32,33))"
        on_timeout 1.0 dialog_is_over
    }

    state dialog_is_over
    {
        disable_player_movement
        set_player_animation SD_SURGE "cond($_bigwolf_playerintheair, 3, cond($dlg==1,32,33))"
        if $dlg==1 focus_on_wolf2
        change_parent_state @intro_end
        execute destroy
    }

    state destroy
    {
        create_child .spiralringfx // give rings to Surge
        change_parent_state @intro_end
        change_child_state scm @destroy
        change_child_state music @destroy
        change_child_state moviefx hide
        enable_player_movement
        destroy
    }
}

object .bigwolf_introcutscene.music
{
    requires 0.2.0
    always_active

    state main
    {
        hide
        let $vol=music_volume()
        change_state fadeout
    }

    state fadeout
    {
        set_music_volume max(0,music_volume()-0.3*dt())
    }

    // ============
    state @destroy
    {
        set_music_volume $vol
        play_music musics/boss.ogg -1
        destroy
    }
}


object .bigwolf_playerintheair
{
    requires 0.2.0
    always_active

    state main
    {
        hide
        change_state no
    }

    state no
    {
        let $_bigwolf_playerintheair=0
        on_player_in_the_air yes
    }

    state yes
    {
        let $_bigwolf_playerintheair=1
        on_player_in_the_air yes
        change_state no
    }

    // callback
    state @destroy
    {
        let $_bigwolf_playerintheair=0
        destroy
    }
}


// spawn this object where you want to focus the camera
// you may set $_bigwolf_moviefx_timeout (in seconds) if you wish
// ...or, you just call @destroy when you're done
// in order to see if this is active, use $_bigwolf_moviefx_active (boolean)

object .bigwolf_moviefx
{
    requires 0.2.0
    always_active

    state main
    {
        let "$_bigwolf_moviefx_active = 1"
        hide
        create_child .moviefx 0 0 moviefx
        let "$tmr = cond($_bigwolf_moviefx_timeout > 0, $_bigwolf_moviefx_timeout, infinity())"
        let "$done = 0"
        let "$_bigwolf_moviefx_timeout = 0"

        let "$dist = sqrt((xpos() - camera_x())^2 + (ypos() - camera_y())^2)"
        let "$time = 0.2"
        let "$sp = $dist / $time"
        let "$dest_x = xpos()"
        let "$dest_y = ypos()"
        let "$src_x = camera_x()"
        let "$src_y = camera_y()"

        set_absolute_position camera_x() camera_y()
        request_camera_focus
        change_state loop
    }

    state loop
    {
        if "$done or (($tmr -= dt()) <= 0)" unfocus

        // move the camera
        let "$vx = ($dest_x - xpos())"
        let "$vy = ($dest_y - ypos())"
        let "$length = sqrt($vx^2 + $vy^2)"
        if "$length <= 10" loop
        set_absolute_position "xpos() + $sp*$vx*dt()/$length" "ypos() + $sp*$vy*dt()/$length"
    }

    state unfocus
    {
        let "$vx = ($src_x - xpos())"
        let "$vy = ($src_y - ypos())"
        let "$length = sqrt($vx^2 + $vy^2)"
        set_absolute_position "xpos() + $sp*$vx*dt()/$length" "ypos() + $sp*$vy*dt()/$length"

        // destroy
        if "$length <= 10" destroy
    }

    state destroy
    {
        let "$_bigwolf_moviefx_active = 0"
        change_child_state moviefx hide
        drop_camera_focus
        destroy
    }

    // ======= callbacks =======
    state @destroy
    {
        let "$done = 1"
        return_to_previous_state
    }
}

object .bigwolf_bandage
{
    requires 0.2.0
    always_active

    state main
    {
        set_animation SD_BIGWOLF_BANDAGE 0
        set_angle 15
        set_zindex 0.46

        change_parent_state @get_position
        let "$offset_x = xpos() - $_bigwolf_xpos"
        let "$offset_y = ypos() - $_bigwolf_ypos"

        change_state nothing
    }

    state nothing
    {
        change_parent_state @get_position
        let "$x = $_bigwolf_xpos + $offset_x"
        let "$y = $_bigwolf_ypos + $offset_y"
        set_absolute_position $x $y
    }

    // ======= callbacks =======
    state @destroy
    {
        destroy
    }
}
